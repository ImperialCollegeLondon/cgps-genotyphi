package net.cgps.wgsa.genotyphi.lib;

import net.cgps.wgsa.genotyphi.core.BlastOutputReader;

import java.io.BufferedReader;
import java.math.BigInteger;
import java.util.function.Function;
import java.util.stream.Stream;

/**
 * Handles a BLAST XML format stream, uses the built in parser to convert to the autogenerated blast match format, these are then converted in mutation search result matches for further use.
 */
public class MutationReader implements Function<BufferedReader, Stream<MutationSearchResult>> {

  private final BlastOutputReader blastReader = new BlastOutputReader();

  private static double calculatePid(final BigInteger hspIdentity, final BigInteger hspAlignLen) {

    return ((double) hspIdentity.intValue() / (double) hspAlignLen.intValue()) * 100;
  }

  @Override
  public Stream<MutationSearchResult> apply(final BufferedReader blastOutputStream) {

    return blastReader.apply(blastOutputStream).getBlastOutputIterations()
        .getIteration()
        .parallelStream()
        .flatMap(iteration -> iteration.getIterationHits()
            .getHit()
            .parallelStream()
            .flatMap(hit -> hit.getHitHsps()
                .getHsp()
                .stream()
                .map(hsp -> {

                  // Check if the match is reversed
                  final boolean reversed = hsp.getHspHitFrom().intValue() > hsp.getHspHitTo().intValue();

                  final MutationBuilder mutationBuilder = new MutationBuilder(hit.getHitAccession());

                  // Extract the list of mutations
                  final SequenceProcessingResult sequenceProcessingResult = new SequenceProcessor(hsp.getHspHseq(), hsp.getHspHitFrom().intValue(), reversed, hsp.getHspQseq(), hsp.getHspQueryFrom().intValue(), mutationBuilder).call();

                  // Add the match w/ mutations to the collection.
                  return new MutationSearchResult(hit.getHitAccession(), hsp.getHspHitFrom().intValue(), hsp.getHspHitTo().intValue(), iteration.getIterationQueryDef(), hsp.getHspQueryFrom().intValue(), hsp.getHspQueryTo().intValue(), hsp.getHspQseq(), hsp.getHspHseq(), calculatePid(hsp.getHspIdentity(), hsp.getHspAlignLen()), hsp.getHspEvalue(), reversed, sequenceProcessingResult.getMutations(), hit.getHitLen().intValue());
                })));
  }

}
